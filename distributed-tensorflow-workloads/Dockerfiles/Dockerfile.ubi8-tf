FROM registry.redhat.io/ubi8/ubi:latest
MAINTAINER Courtney Pacheco <cpacheco@redhat.com>

# Set CUDA version to use
ENV CUDA_MAJOR_VERSION=11
ENV CUDA_MAJOR_RELEASE=0

# cudNN version
ENV CUDNN_VERSION=8.0.5.39

# NCCL version
ENV NCCL_VERSION=2.8.3-1

# For TensorFlow, set the versions of required packages, as well as the arch and Python version
ENV BAZEL_VERSION=3.1.0
ENV NUMPY_VERSION=1.18.5
ENV TF_VERSION=2.4.0
ENV ARCH=x86_64
ENV PYTHON_VERSION=36

# Copy the CUDA repo file
COPY cuda.repo /etc/yum.repos.d/cuda.repo

# Copy the CUDA ML repo
COPY nvidia-ml.repo /etc/yum.repos.d/nvidia-ml.repo

# Install EPEL, python3-devel, python3-pip, gcc, git, patch, and wget
RUN dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && \
    dnf -y install gcc \
                   gcc-c++ \
                   git \
                   glibc \
                   glibc-devel \
                   glibc-static \
                   java-devel \
                   patch \
                   python3-devel \
                   python3-pip \
                   unzip \
                   wget && \
    dnf clean all && \
    rm -rf /var/cache/dnf*

# Install CUDA and TensorFlow related packages, then symlink as appropriate
RUN if [[ ${CUDA_MAJOR_VERSION} < 11 ]]; then \
        dnf install -y cuda-cudart-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-cufft-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-cufft-dev-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-cupti-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-curand-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-curand-dev-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-cusolver-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-cusolver-dev-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-cusparse-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-cusparse-dev-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-compat-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-misc-headers*${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-nvcc-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcublas-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcublas-devel-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcudnn8-devel-${CUDNN_VERSION}-1.cuda${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} \
                       libnccl-${NCCL_VERSION}+cuda${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} \
                       libnccl-devel-${NCCL_VERSION}+cuda${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} \
                       libnccl-${NCCL_VERSION}+cuda${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} && \
        dnf clean all && \
        rm -rf /var/cache/dnf*; \
    else \
        dnf install -y cuda-cudart-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-cupti-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-libraries-devel-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcufft-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcufft-devel-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcurand-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcurand-devel-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcusolver-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcusolver-devel-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcusparse-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcusparse-devel-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-compat-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       cuda-nvcc-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcublas-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcublas-devel-${CUDA_MAJOR_VERSION}-${CUDA_MAJOR_RELEASE} \
                       libcudnn8-devel-${CUDNN_VERSION}-1.cuda${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} \
                       libnccl-${NCCL_VERSION}+cuda${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} \
                       libnccl-devel-${NCCL_VERSION}+cuda${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} \
                       libnccl-${NCCL_VERSION}+cuda${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} && \
        dnf clean all && \
        rm -rf /var/cache/dnf*; \
    fi

RUN ln -s cuda-${CUDA_MAJOR_VERSION}.${CUDA_MAJOR_RELEASE} /usr/local/cuda

# Install TensorFlow 2.x requried packages with pip3
RUN pip3 install numpy==${NUMPY_VERSION} && \
    pip3 install absl-py \
                 astor \
                 gast \
                 keras \
                 keras_preprocessing \
                 protobuf \
                 wheel

# Install Bazel
RUN cd /tmp && \
    wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh && \
    sh bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh && \
    rm -rf bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh

# Create symlinks for /usr/bin/python and /usr/lib/python3.6
RUN ln -s /usr/bin/python3 /usr/bin/python && \
    ln -s /usr/lib/python3.6m /usr/lib/python3.6

# Configure the TensorFlow 2.x build
ENV GCC_HOST_COMPILER_PATH=/usr/bin/gcc
ENV CC_OPT_FLAGS='-march=native'
ENV TF_DOWNLOAD_CLANG=0
ENV TF_ENABLE_XLA=1
ENV TF_NEED_COMPUTECPP=0
ENV TF_NEED_CUDA=1
ENV TF_NEED_MPI=0
ENV TF_NEED_OPENCL=0
ENV TF_NEED_OPENCL_SYCL=0
ENV TF_NEED_ROCM=0
ENV TF_NEED_TENSORRT=0
ENV TF_SET_ANDROID_WORKSPACE=0
ENV PYTHON_BIN_PATH=/usr/bin/python
ENV PYTHON_LIB_PATH=/usr/lib/python3.6

#For CUDA 10.1, cublas_api.h is actually in the CUDA 10.2 directory. Otherwise, no need to change.
ENV TF_CUDA_PATHS='/usr/local/cuda,/usr/include,/usr/lib64,/usr/local/cuda-10.2/targets/x86_64-linux/include,/usr/local/cuda-10.2/targets/x86_64-linux/lib,/usr/local/nccl'
ENV TF_CUDA_VERSION=11.0
ENV TF_CUDNN_VERSION=8
ENV TF_CUDA_COMPUTE_CAPABILITIES='3.5,7.0'
ENV TF_CUDA_CLANG=0
ENV TF_NCCL_VERSION=2
ENV TMP=/tmp

# Clone git repo for TensorFlow and configure the build
RUN cd /opt && \
    git clone https://github.com/tensorflow/tensorflow.git && \
    cd tensorflow && \
    git checkout tags/v${TF_VERSION} && \
    ./configure

# Build the TensorFlow pip3 package
RUN cd /opt/tensorflow && \
    bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package && \
    ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

# Install the TensorFlow pip3 package
RUN pip3 install /tmp/tensorflow_pkg/tensorflow-${TF_VERSION}-cp${PYTHON_VERSION}-cp${PYTHON_VERSION}m-linux_${ARCH}.whl

# Ideally, we should be using the "--layers=false" argument with podman/docker. Thus, adding a new "layer" 
# (via the below "RUN" argument) to delete unwanted folders will decrease the image's final size
RUN rm -rf /tmp/* && \
    rm -rf /opt/tensorflow && \
    rm -f /etc/yum.repos.d/nvidia-ml.repo && \
    rm -f /etc/yum.repos.d/cuda.repo

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.0 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441"
